import dash
import dash_html_components as html
import dash_table
import dash_table.FormatTemplate as FormatTemplate
from dash_table.Format import Format, Scheme, Sign, Symbol
from dash_table.Format import Sign
import pandas as pd
from collections import OrderedDict

app = dash.Dash(__name__)

dh = {'power_solar': [1, 2, 3],
      'power_load': [1, 2, 3],
      'power_wind': [1, 2, 3],
      'power_grid': [1, 2, 3],
      'EV_SoC': [1, 2, 3],
      'H_SoC': [1, 2, 3],
      }
pv_o = dh['power_solar']
w_o = dh['power_wind']
g_o = dh['power_grid']
l_o=dh['power_load']

df_typing_formatting = pd.DataFrame(OrderedDict([
    ('Month', ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August','September','October', 'November', 'December', 'Total 2019']),
    ('PV', [sum(pv_o[:744])/31, 766000, 431000, 382000, 341000, 316000, 276000, 173000,1,1,1,1,1]),
    ('Wind', [sum(w_o[:744])/31, -0.051, 0.001, 0.083, 0.063, 0.024, -0.065, 0.012,1,1,1,1,1]),
    ('Grid', [sum(g_o[:744])/31, 766000, 431000, 382000, 341000, 316000, 276000, 173000,1,1,1,1,1]),
    ('Electricity Saved', [(sum(l_o[:744])-sum(w_o[:744])-sum(pv_o[:744]))/31, -0.051, 0.001, 0.083, 0.063, 0.024, -0.065, 0.012,1,1,1,1,1]),
    ('Without', [(sum(l_o[:744])*0.22)/31, 766000, 431000, 382000, 341000.001, 316000, 276000, 173000,1,1,1,1,1]),
    ('With', [0.143, -0.051, 0.001, 0.083, 0.063, 0.024, -0.065, 0.012,1,1,1,1,1]),
]))

app.layout = html.Div([
    dash_table.DataTable(
        id='typing_formatting_1',
        data=df_typing_formatting.to_dict('rows'),
        columns=[{
            'id': 'Month',
            'name': 'City',
            'type': 'text'
        }, {
            'id': 'PV',
            'name': 'PV output (KWh) / day',
            'type': 'numeric',
            'format': Format(
                precision=1,
                scheme=Scheme.fixed,
                symbol=Symbol.yes,
                symbol_suffix=u'KWh')
        }, {
            'id': 'Wind',
            'name': 'PV output (KWh) / day',
            'type': 'numeric',
            'format': Format(
                precision=1,
                scheme=Scheme.fixed,
                symbol=Symbol.yes,
                symbol_suffix=u'KWh')
        },  {
            'id': 'Grid',
            'name': 'Grid output (KWh) / day',
            'type': 'numeric',
            'format': Format(
                precision=1,
                scheme=Scheme.fixed,
                symbol=Symbol.yes,
                symbol_suffix=u'KWh')

        },  {
            'id': 'Electricity Saved',
            'name': 'Electricity Saved (KWh) / day',
            'type': 'numeric',
            'format': Format(
                precision=1,
                scheme=Scheme.fixed,
                symbol=Symbol.yes,
                symbol_suffix=u'KWh')

        }, {
            'id': 'Without',
            'name': 'Energy cost Without (€)',
            'type': 'numeric',
            'format': Format(
                precision=2,
                scheme=Scheme.fixed,
                symbol=Symbol.yes,
                symbol_suffix=u'€'
            ),
        }, {
            'id': 'With',
            'name': 'Energy cost With (€)',
            'type': 'numeric',
            'format': Format(
                precision=2,
                scheme=Scheme.fixed,
                symbol=Symbol.yes,
                symbol_suffix=u'€'
            )
        },
        ],
        editable=True
    )
])

if __name__ == '__main__':
    app.run_server(debug=True)
